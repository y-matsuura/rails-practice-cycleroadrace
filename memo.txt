▼ railsプロジェクト作成
-----------------------------------------------------------
// 設定ファイルの準備
zipをダウンロードして適当なディレクトリに配置する
解凍する
$ unzip xxx.zip

// railsプロジェクト作成
$ docker-compose run web rails new . --force --database=mysql

// ビルド
$ docker-compose build

// DBの設定ファイルを修正する
$ vi config/database.yml

// DBを作成
$ docker-compose run web bundle exec rake db:create
-----------------------------------------------------------

▼ railsアプリケーション開発
-----------------------------------------------------------
// ルーティングを設定する
$ vi confit/route.rb
=================================
+ root 'boards#index'
=================================

// 掲示板コントローラーを作成する
$ vi app/controllers/boards_controller.rb

// 掲示板一覧ビューを作成する
$ mkdir app/views/boards
$ atom app/views/boards/index.html.erb

// Bootstrapのgemをインストールする
$ vim Gemfile
=================================
+ gem 'bootstrap', '~> 4.0.0'
+ gem 'mini_racer'
=================================
$ docker-compose build
$ docker-compose stop
$ docker-compose up -d

// Bootstrapを使えるようにする
$ mv app/assets/stylesheets/application.css app/assets/stylesheets/application.scss
$ vi app/assets/stylesheets/application.scss
=================================
- = require_tree
- = require_self
+ @import "bootstrap";
=================================
$ vi app/assets/javascripts/application.js
=================================
- = require jquery
+ = require jquery3
+ //= require popper
+ //= require bootstrap-sprockets
=================================

// 掲示板一覧のビューをつくる
$ vi app/views/boards/index.html.erb
=================================
+ 資料のhtmlをコピペする
=================================

// レイアウトを修正する
$ vi app/views/layouts/application.html.erb
=================================
- <%= yield %>
+ <div class="container"><%= yield %></div>
=================================

// 共通のスタイルを定義する
$ cd app/assets/stylesheets/
$ vi base.scss
※↑この名前は任意でOK
=================================
+
h1 {
  margin: 30px 0;
}
=================================

// 掲示板のスタイルを定義する
$ vi boards.scss
=================================
+
.boards__table {
  tr:hover {
    cursor: pointer;
  }
}

.boards__linkBox {
  a {
    margin: 0 8px
  }
}
=================================

// 共通スタイルと掲示板スタイルを読み込む
$ vim application.scss
=================================
+ @import "base";
+ @import "boards";
=================================

// モデルとテーブルを作成する
$ docker-compose run web bundle exec rails g model board name:string title:string body:text
$ docker-compose run web bundle exec rake db:migrate

// 掲示板を作成する
$ vi config/routes.rb
=================================
+ get 'boards', to: 'boards#index'
+ get 'boards/new', to: 'boards#new'
=================================

// newメソッドをつくる
$ vi app/controllers/boards_controller.rb

// newのビューを作成する
$ atom app/controller/new.html.scss

//
$ atom app/controllers/boards_controller.rb

$ atom app/views/boards/index.html.erb
=================================
- <a class="btn btn-outline-dark">新規作成</a>
+ <a href="/boards/new" class="btn btn-outline-dark">新規作成</a>
=================================

// ヘルパーメソッド
$ vim app/controllers/boards_controller.rb
// newメソッドに追加する
=================================
+ @board = Board.new
=================================

//
$ atom app/views/boards/new.html.erb
=================================
+
<%= form_for @board do |f| %>
  <div class="form-group">
    <%= f.label :name, '名前' %>
    <%= f.text_field :name, class: 'form-control' %>
  </div>
  <div class="form-group">
    <%= f.label :title, 'タイトル' %>
    <%= f.text_field :title, class: 'form-control' %>
  </div>
  <div class="form-group">
    <%= f.label :body, '本文' %>
    <%= f.text_area :body, class: 'form-control', rows: 10 %>
  </div>
  <%= f.submit '保存', class: 'btn btn-primary' %>
<% end %>
=================================

// ローティングを設定
$ atom config/routes.rb
=================================
+ post 'boards', to: 'boards#create'
=================================

// createメソッド追加
$ atom app/controller/boards_controller.rb
+ Board.create(board_params)
+ private
  def board_params
    params.require(:board).permit(:name, :title, :body)
  end

// boradコントローラのindexメソッドに処理を追加
$ atom app/controller/boards_controller.rb
=================================
+ @boards = Board.all
=================================

// indexのviewを修正
$ atom app/views/boards/index.html.erb
=================================
+
<% @boards.each do |board| %>
  <tr>
    <th><%= board.id %></th>
    <th><%= board.title %></th>
    <th><%= board.name %></th>
    <th><%= board.created_at %></th>
    <th><%= board.updated_at %></th>
  </tr>
<% end %>
=================================

// タイムゾーンを設定する
$ atom config/application.rb
=================================
+ config.time_zone = 'Tokyo'
=================================
$ docker-compose stop
$ docker-compose up -d

// 日時を試しにフォーマットする
$ atom app/views/boards/index.html.erb
=================================
- <th><%= board.created_at %></th>
+ <th><%= board.created_at.strftime('%Y年%m月%d日 %H時%M分') %></th>
=================================

// フォーマットに名前をつける
$ touch config/initializers/time_formats.rb
$ atom config/initializers/time_formats.rb
=================================
+ Time::DATE_FORMATS[:datetime_jp] = '%Y年％ｍ月%d日 %H時%M分'
=================================

$ docker-compose stop
$ docker-compose up -d

// 作成したフォーマットを使う
$ atom app/views/boards/index.html.erb
=================================
- <th><%= board.created_at.strftime('%Y年%m月%d日 %H時%M分') %></th>
+ <th><%= board.created_at.to_s(:datetime_jp) %></th>
=================================

// 詳細画面のルートを追加
$ atom config/routes.rb
=================================
+ get 'boards/:id', to: 'boards#show'
=================================

// showアクションを追加
$ atom app/controllers/boards_controller.rb
=================================
+
def show
  @board = Board.find(params[:id])
end
=================================

// showのビューを作成する
$ atom app/views/boards/show.html.erb
※ここではgithubからコピペする

// 改行コードをhtmlに変換する
$ atom app/views/boards/show.html.erb
=================================
- <%= @board.body %>
+ <%= simple_format(@board.body) %>
=================================

// ルーティングをresouceルーティングに変更する
$ atom config/routes.rb
=================================
- 現在までのすべてのルーティング
+ resources :boards, only: [:index, :new, :create, :show]
=================================

// ルーティングを制限する
$ atom config/routes.rb
=================================
- resources :boards
+ resources :boards, only: [:index, :new, :create, :show]
=================================

// リンクを追加していく
$ atom app/views/boards/index.html.erb
=================================
- <a href="/boards/new" class="btn btn-outline-dark">新規作成</a>
+ <%= link_to '新規作成', new_board_path, class: 'btn btn-outline-dark' %>
+ <%= link_to '詳細', board, class: 'btn btn-outline-dark' %>
=================================

$ atom app/views/boards/new.html.erb
=================================
- <a href="/boards" class="btn btn-outline-dark">掲示板一覧</a>
+ <%= link_to '掲示板一覧', boards_path, class: 'btn btn-outline-dark' %>
=================================

$ atom app/views/boards/show.html.erb
=================================
- <a href="/boards" class="btn btn-outline-dark">一覧</a>
- <a href="/boards" class="btn btn-outline-dark">編集</a>
+ <%= link_to '一覧', boards_path, class: 'btn btn-outline-dark' %>
+ <%= link_to '編集', boards_path, class: 'btn btn-outline-dark' %>
=================================

// 編集のルーティングを追加する
$ atom config/routes.rb
=================================
- resources :boards, only: [:index, :new, :create, :show]
+ resources :boards, only: [:index, :new, :create, :show, :edit, :update]
=================================

// 編集のアクションを追加する
// updateアクションを追加
$ atom app/controllers/boards_controller.rb
=================================
+
def edit
  @board = Board.find(params[:id])
end
=================================

// 編集のフォームを作成する
※ここでは新規作成フォームをコピーする
$ cp app/views/boards/new.html.erb app/views/boards/edit.html.erb
$ atom app/views/boards/edit.html.erb
=================================
- <h1>掲示板作成</h1>
+ <h1>掲示板編集</h1>
=================================

// updateアクションを追加
$ atom app/controllers/boards_controller.rb
=================================
+
def updated
  board = Board.find(params[:id])
  board.update(board_params)
  redirect_to board
end
=================================

// 詳細フォームの編集リンクを修正する
$ atom app/views/boards/show.html.erb
=================================
- <%= link_to '編集', boards_path, class: 'btn btn-outline-dark' %>
+ <%= link_to '編集', edit_board_path, class: 'btn btn-outline-dark' %>
=================================

// ビューの共通要素をパーシャルにする
$ cp app/views/boards/new.html.erb app/views/boards/_form.html.erb
$ atom app/views/boards/_form.html.erb
=================================
- フォーム以外のタグは削除
=================================

// パーシャルを他のフォームで読む
$ atom app/views/boards/new.html.erb
=================================
- フォームのタグを削除
+ <%= render partial: 'form' %>
=================================

$ atom app/views/boards/edit.html.erb
=================================
- フォームのタグを削除
+ <%= render partial: 'form' %>
=================================

// インスタンス変数をローカル変数にしてパーシャルにわたす
$ atom app/views/boards/new.html.erb
=================================
- <%= render partial: 'form' %>
+ <%= render partial: 'form', locals: { board: @board } %>
=================================

$ atom app/views/boards/edit.html.erb
=================================
- <%= render partial: 'form' %>
+ <%= render partial: 'form', locals: { board: @board } %>
=================================

$ atom app/views/boards/_form.html.erb
=================================
- <%= form_for @board do |f| %>
+ <%= form_for board do |f| %>
=================================

//
$ cp app/views/boards/show.html.erb app/views/boards/_board.html.erb
$ atom app/views/boards/_board.html.erb
=================================
- 上部のリンクの記述は削除
- <h4><%= @board.title %></h4>
- <%= @board.name %></p>
+ <h4><%= board.title %></h4>
+ <%= board.name %></p>
=================================

// パーシャルに書き換える
$ atom app/views/boards/show.html.erb
=================================
- cardクラス以下の記述。フォームは削除しない。
+ <%= render partial: 'board', object: @board %>
=================================
※object: @boardとした場合は、パーシャル名と同期のローカル変数が作成されてパーシャルに渡される

$ vi config/routes.rb
=================================
- resources :boards
+ resources :boards, only: [:index, :new, :create, :show, :edit, :update]
=================================

$ atom app/views/boadrs/index.html.erb
=================================
+ <td><%= link_to '削除', board, class: 'btn btn-outline-dark', method: :delete %></td>
=================================

// createアクションを修正
$ atom app/controllers/boards_controller.rb
=================================
- Board.create(board_params)
+ board = Board.create(board_params)
+ redirect_to board
=================================

// destroyアクションを追加
$ atom app/controllers/boards_controller.rb
=================================
+
def destroy
  board = Board.find(params[:id])
  board.delete
  redirect_to boards_path
end
=================================

// リファクタリング
$ atom app/controllers/boards_controller.rb
=================================
+
def set_target_board
  @board = Board.find(params[:id])
end

+ before_action :set_target_board, only: %i[show edit update destroy
※show edit update destroyのアクションをリファクタリング
具体的にはset_target_boardと同様の処理を削除する
=================================

// ページネーション動作確認用のデータを作成
$ atom db/seeds.rb
=================================
+
if Rails.env == 'development'
  (1..50).each do |i|
      Board.create(name: "ユーザー#{i}", title: "タイトル#{i}", body: "本文#{i}")
  end
end
=================================

// seedを実行する
$ docker-compose exec web bundle exec rake db:seed

// kaminariをインストール
$ atom Gemfile
=================================
+ gem 'kaminari'
=================================
$ docker-compose build

// 確認
$ docker-compose stop
$ docker-compose up -d

// kaminariの動作を変えるための設定ファイルを作成
$ docker-compose exec web bundle exec rails g kaminari:config

// ページネーション用のビューファイルを自動生成
$ docker-compose exec web bundle exec rails g kaminari:views bootstrap4

// コントローラを修正
$ atom app/controllers/boards_controller.rb
=================================
- @boards = Board.all
+ @boards = Board.page(params[:page])
=================================
※kamninariのデフォルト表示件数は２５件

// ページネーションのリンクを追加
$ atom app/views/boards/index.html.erb
=================================
+ <%= paginate @boards %>
=================================

// ページネーションの文言を日本語化
$ atom config/application.rb
=================================
+ config.i18n.default_locale = :ja
=================================

$ atom config/locales/ja.yml
=================================
+
ja:
  view:
    pagination:
      first: '最初'
      last: '最後'
      precious: 前
      next: '次'
      truncate: '...'
=================================
// 確認
$ docker-compose stop
$ docker-compose up -d

// ページネーションを中央寄せにする
$ sudo atom app/views/kaminari/_paginator.html.erb
=================================
- <ul class="pagination">
+ <ul class="pagination justify-content-center">
=================================

// 表示件数を変更してみる
$ atom config/initializers/kaminari_config.rb
=================================
- config.default_per_page = 25
+ config.default_per_page = 10
※コメントアウトされているので解除して件数を変更する
=================================
$ docker-compose stop
$ docker-compose up -d

// createアクションにフラッシュメッセージを設定する
$ atom app/controllers/boards_controller.rb
=================================
+ flash[:notice] = "「#{board.title}」の掲示板を作成しました"
=================================

// 詳細画面に表示する
$ atom app/views/boards/show.html.erb
=================================
+
<% if flash[:notice] %>
  <div class="alert alert-primary"><%= flash[:notice] %></div>
<% end %>
=================================

// destroyアクションでredirect_toの引数にフラッシュメッセージを設定してみる
$ atom app/controllers/boards_controller.rb
=================================
- redirect_to boards_path
+ redirect_to boards_path, flash: { notice: "「#{@board.title}」の掲示板が削除されました。" }
=================================

// 一覧画面で表示してみる
$ atom app/views/boards/index.html.erb
=================================
+
<% if flash[:notice] %>
  <div class="alert alert-danger"><%= flash[:notice] %></div>
<% end %>
=================================

// バリデーションを設定する
$ atom app/models/board.rb
=================================
+
validates :name, presence: true, length: { maximum: 10 }
validates :title, presence: true, length: { maximum: 30 }
validates :body, presence: true, length: { maximum: 1000 }
=================================

//
$ atom app/controllers/boards_controller.rb
=================================
- board = Board.create(board_params)
+ board = Board.new(board_params)

+
if board.save
  flash[:notice] = "「#{board.title}」の掲示板を作成しました"
  redirect_to board
else
  redirect_to new_board_path, flash: {
    board: board,
    error_messages: board.errors.full_messages
  }
end
=================================

// フラッシュでエラーメッセージを追加
$ atom app/views/boards/_form.html.erb
=================================
+
<% if flash[:error_messages] %>
  <div class="alert alert-danger">
    <ul>
      <% flash[:error_messages].each do |msg| %>
        <li><%= msg %></li>
      <% end %>
    </ul>
  </div>
<% end %>
=================================

//　エラーメッセージを日本語化するためにgemを追加
$ atom Gemfile
=================================
+ gem 'rails-i18n'
=================================
$ docker-compose build
$ docker-compose up -d

// プロパティを日本語化
$ atom config/locales/ja.yml
=================================
+
activerecord:
  attributes:
    board:
      name: 名前
      title: タイトル
      body: 本文
=================================

// モデルのアソシエーションのためのgemを追加する
$ atom Gemfile
=================================
+ gem 'annotate'
=================================
$ docker-compose build
$ docker-compose up -d

// モデルにテーブルの構造がコメントとして追加されるようにする
$ docker-compose exec web bundle exec annotate

// 手動でannotateを実行するのは面倒なので、マイグレーション時に自動で実行されるようにする
$ docker-compose exec web bundle exec rails g annotate:install

// コメントモデルとテーブルのマイグレーションファイルを作成する
$ docker-compose run web bundle exec rails g model comment board:references name:string comment:text
※※モデルとテーブルを削除したい場合
$ docker-compose run web bundle exec rails destroy model comment
$ docker-compose run web bundle exec rails g migration remove_comments
=================================
+ drop_table comments
=================================
$ docker-compose run web bundle exec rake db:migrate

// not null制約を追加する
$ atom db/migrate/{ ファイル名 }
=================================
- t.string :name
- t.text :comment
+ t.string :name, null: false
+ t.text :comment, null: false
=================================

// マイグレーションファイルを実行する
$ docker-compose run web bundle exec rake db:migrate

// アソシエーションを追加する
$ atom app/models/board.rb
=================================
+ has_many :comments
=================================

// Commentコントローラを作成する
$ docker-compose exec web rails g controller comments create destroy --skip-template-engine

// ルートの記述方式を変更する
$ atom config/routes.rb
=================================
+ resources :comments, only: %i[create destroy]
=================================

// showアクションにcommentsを追加する
$ atom app/controllers/boards_controller.rb
=================================
+ @comment = @board.comments.new
=================================

// コメントフォームをパーシャルとして作成する
$ atom app/views/boards/show.html.erb
=================================
+ <%= render partial: 'comment_form', locals: { comment: @comment } %>
=================================

// パーシャル作成する
$ atom app/views/boards/_comment_form.html.erb

// スタイルを修正する
$ atom app/assets/stylesheets/comments.scss

// CSSのインポートを追加する
$ atom app/assets/stylesheets/application.scss
=================================
+ @import "comments"
=================================

// リクエストパラメータやSQLを整形するgemを追加
$ atom Gemfile
=================================
+ gem 'rails-flog', require: 'flog'
=================================
$ docker-compose build
$ docker-compose up -d

// commentコントローラのprivateメソッドを追加
$ atom app/controllers/comments_controller.rb
=================================
+
private

def comment_params
  params.require(:comment).permit(:board_id, :name, :comment)
end
=================================

// createアクションの処理を追加
=================================
+
comment = Comment.new(comment_params)
if comment.save
  flash[:notice] = 'コメントを投稿しました'
  redirect_to comment.board
else
  redirect_to :back, flash: {
    comment: comment,
    error_messages: comment.errors.full_messages
  }
end
=================================

// showアクションに追加
$ atom app/controllers/boards_controller.rb
=================================
- @comment = @board.comments.new
+ @comment = Comment.new(board_id: @board.id)
=================================

// コメントを表示する修正
$ atom app/views/boards/show.html.erb

// コメント表示用のパーシャルを作成する
$ mkdir app/views/comments
$ atom app/views/comments/_comment.html.erb
=================================
+ githubからコピペ
=================================

// コメント画面のスタイルを設定
$ atom app/assets/stylesheets/comments.scss
=================================
+ githubからコピペ
=================================

// コメントのフォームをリファクタリング
$ mv app/views/boards/_comment_form.html.erb app/views/comments/_form.html.erb
$ atom app/views/boards/show.html.erb
=================================
- comment_form
+ comments/form
=================================

// コメントのバリデーション
$ atom app/models/comment.rb
=================================
+ validates :name, presence: true, length: { maximum: 10 }
+ validates :comment, presence: true, length: { maximum: 1000 }
=================================

// エラーメッセージを表示する
$ atom app/controllers/comments_controller.rb

// 共通のビュー
$ mkdir app/views/shared
※sharedは任意の名前でOK
$ cp app/views/boards/_form.html.erb app/views/shared/_error_messages.html.erb
$ atom app/views/shared/_error_messages.html.erb
=================================
- form以下を削除
=================================

// エラーメッセージのビューを各ビューから読み込む
$ atom app/views/boards/_form.html.erb
=================================
- formより上記
+ <%= render 'shared/error_messages' %>
=================================

//
=================================
$ atom app/views/comments/_form.html.erb
+ <%= render 'shared/error_messages' %>
=================================

// エラーメッセージを日本語化
$ atom config/locales/ja.yml
+

// destroyアクションを修正
=================================
+
comment = Comment.find(params[:id])
comment.delete
redirect_to comment.board, flash: { notice: 'コメントが削除されました' }
=================================

// 削除のリンクを設置
$ atom app/views/comments/_comment.html.erb
=================================
+ <span><%= link_to '削除', comment, method: :delete, data: { confirm: '削除してもよろしいですか？' } %></span>
=================================

// 編集画面にもバリデーションを実装する
$ atom app/controllers/boards_controller.rb
※createアクションを参考にしてupdateアクションを修正する

// tagsテーブルをつくる
$ docker-compose exec web bundle exec rails g model tag name:string

// boardとtagの中間テーブルをつくる
$ docker-compose exec web bundle exec rails g model board_tag_relation board:references tag:references

// tagsテーブルのマイグレーションファイルを修正する。nameにnullを許可しない設定
$ atom db/migrate/20190302065259_create_tags.rb
=================================
- t.string :name
+ t.string :name, null: false
=================================

// マイグレーションファイルを実行する
$ docker-compose exec web bundle exec rake db:migrate

// board_tag_relationモデルの設定を確認する
$ atom app/models/board_tag_relation.rb

// tagモデルを設定する
$ atom app/models/tag.rb
=================================
+ has_many :board_tag_relations
+ has_many :boards, through: :board_tag_relations
=================================

// boardモデルに設定を追加する
$ atom app/models/board.rb
=================================
+ has_many :board_tag_relations
+ has_many :tags, through: :board_tag_relations
=================================

// 中間テーブルなども削除したい
$ atom app/models/board.rb
=================================
- has_many :comments
- has_many :board_tag_relations
+ has_many :comments, dependent: :delete_all
+ has_many :board_tag_relations, dependent: :delete_all
※delete_all：関連するデータをすべて削除。destroyという設定もあるので要確認。
※dependentはmodelのメソッドがdestroyメソッドのみ有効。deleteでは働かない。
=================================

$ atom app/models/tag.rb
=================================
- has_many :board_tag_relations
+ has_many :board_tag_relations, dependent: :delete_all
=================================

$ atom app/controllers/boards_controller.rb
=================================
- @board.delete
+ @board.destroy
=================================

// タグのデータをつくってみる
$ atom db/seeds.rb
=================================
+
Tag.create([
    { name: 'Ruby' },
    { name: 'Ruby on Rails4' },
    { name: 'Ruby on Rails5' },
    { name: 'Python2' },
    { name: 'Python3' },
    { name: 'Django2' }
  ])
=================================
$ docker-compose exec web rails db:seed

// タグを表示させる
$ atom app/views/boards/_form.html.erb
=================================
+
<div class="form-group">
  <span>タグ</span>
  <%= f.collection_check_boxes(:tag_ids, Tag.all, :id, :name) do |tag| %>
    <div class="form-check">
      <%= tag.label class: 'form-check-label' do %>
        <%= tag.check_box class: 'form-check-input' %>
        <%= tag.text %>
      <% end %>
    </div>
  <% end %>
</div>
=================================

//　タグを保存するように修正する
$ atom app/controllers/boards_controller.rb
=================================
- params.require(:board).permit(:name, :title, :body)
+ params.require(:board).permit(:name, :title, :body, tag_ids: [])
=================================

// 詳細画面にタグを表示する
$ atom app/views/boards/_board.html.erb
=================================
+
<% board.tags.each do |tag| %>
  <span class="badge badge-primary"><%= tag.name %></span>
<% end %>
=================================

// 掲示板一覧にタグのセレクトボックスを追加
$ atom app/views/boards/index.html.erb
=================================
+
<%= form_tag boards_path, method: :get, class: 'boards__searchForm' do %>
  <%= select_tag :tag_id,
                options_from_collection_for_select(Tag.all, :id, :name, params[:tag_id]),
                {
                  prompt: 'タグで絞り込み',
                  class: 'form-control boards__select',
                  onchange: 'submit(this.form);'
                }
  %>
<% end %>
=================================

// selectboxのスタイルを設定
$ atom app/assets/stylesheets/boards.scss
+
=================================
.boards__searchForm {
  display: inline-block;
}

.boards__select {
  display: inline-block;
  width: auto;
}
=================================

// 選択したタグで絞り込むように修正する
$ atom app/controllers/boards_controller.rb
=================================
- @boards = Board.page(params[:page])
+
@boards = params[:tag_id].present? ? Tag.find(params[:tag_id]).boards : Board.all
@boards = @boards.page(params[:page])
=================================

// ヘッダーを追加
$ mkdir app/views/application
$ atom app/views/application/_header.html.erb
※githubからコピペ

// ヘルパーを実装
$ atom app/helpers/application_helper.rb
=================================
+
def header_link_item(name, path)
  class_name = 'nav-item'
  class_name << ' active' if current_page?(path)

  content_tag :li, class: class_name do
    link_to name, path, class: 'nav-link'
  end
end
=================================

// ルートを追加
$ atom config/routes.rb
=================================
+ root 'home#index'
=================================

// パーシャルを追加
$ atom app/views/layouts/application.html.erb
=================================
+ <%= render 'header' %>
※body直下に追加
=================================

▼認証機能
// 必要なgemをインストール
$ atom Gemf
=================================ile
※コメントアウトを解除
- # gem 'bcrypt', '~> 3.1.7'
+ gem 'bcrypt', '~> 3.1.7'
=================================
$ docker-compose exec web bundle
$ docker-compose restart web

// userモデルをつくる
$ docker-compose exec web rails g model user name:string password_digest:string

// マイグレーションファイルを修正
$ atom db/migrate/20190304155753_create_users.rb
=================================
- t.string :name
- t.string :password_digest
+ t.string :name, null: false
+ add_index :users, :name, unique: true
=================================

// マイグレートを実行
$ docker-compose exec web rails db:migrate

// session管理のためのコントローラをつくる
$ docker-compose exec web rails g controller sessions create destroy --skip-template-engine

$ docker-compose exec web rails g controller home index

$ docker-compose exec web rails g controller users new create me

$ rm app/views/users/create.html.erb

// ルートを修正
$ atom config/routes.rb
=================================
- get 'users/new'
- get 'users/create'
- get 'users/me'
- get 'home/index'
- get 'sessions/create'
- get 'sessions/destroy'
+ resources :users, only: %i[new create]
+ 'mypage', to: 'users#me'
+ post 'login', to: 'sessions#create'
+ delete 'logout', to: 'sessions#destroy'
=================================

// usersモデルに認証用の設定を追加
$ atom app/models/user.rb
=================================
+ has_secure_password
=================================

// 認証情報のバリデーション
$ atom app/models/user.rb
=================================
+
validates :name,
  presence: true,
  uniqueness: true,
  length: { maximum: 16 },
  format: {
    with: /\A[a-z0-9]+\z/,
    message: 'は小文字英数字で入力してください'
  }
validates :password,
  length: { minimum: 8 }
=================================

// バリデーションエラーのメッセージを日本語で表示できるようにする
$ atom config/locales/ja.yml
=================================
+
user:
  name: ユーザー名
  password: パスワード
  password_confirmation: パスワード（確認）
=================================

$ rails再起動
$ docker-compose restart

$ atom app/views/application/_header.html.erb
=================================
※githubのリソースをコピペ
=================================

// ユーザー登録のフォームをつくる
// newアクションに追加
$ atom app/controllers/users_controller.rb
=================================
+ @user = User.new
=================================

// フォームをつくる
$ atom app/views/users/new.html.erb
=================================
+
<h1>ユーザー登録</h1>
<%= render partial: 'form', locals: { user: @user } %>
=================================

// フォームパーシャルをつくる
$ atom app/views/users/_form.html.erb
=================================
※githubのリソースをコピペ
=================================

// ユーザー登録を実装する
// パラメータを取得する処理を追加
$ atom app/controllers/users_controller.rb
=================================
+
private

def user_params
  params.require(:user).permit(:name, :password, :passowrd_confirmation)
end
=================================

// createアクションに登録処理を追加
=================================
+
user = User.new(user_params)
if user.save
  session[:user_id] = user.id
  redirect_to mypage_path
else
  redirect_to :back, flash: {
    user: user,
    error_messages: user.errors.full_messages
  }
end
=================================

// バリデーションエラーでnewに戻った際にフォームの値が消えずに残るように修正
=================================
- @user = User.new
+ @user = User.new(flash[:user])
=================================

// ログイン画面
$ atom app/views/home/index.html.erb
=================================
+ <%= render partial: 'users/login_form' %>
=================================

// パーシャルをつくる
$ atom app/views/users/_login_form.html.erb
=================================
※githubのリソースをコピペ
=================================

// ログイン認証の実装
$ atom app/controllers/sessions_controller.rb
createアクションに実装
=================================
+
user = User.find_by(name: params[:session][:name])
if user && user.authenticate(params[:session][:password])
  session[:user_id] = user.id
  redirect_to mypage_path
else
  render 'home/index'
end
=================================

// ログアウトの処理
destroyアクションに実装
$ atom app/controllers/sessions_controller.rb
=================================
+
session.delete(:user_id)
redirect_to root_path
=================================

// ログイン中のユーザーを取得する
$ atom app/controllers/application_controller.rb
=================================
+
before_action :current_user

return unless session[:user_id]
@current_user = User.find_by(id :session[:user_id])
=================================

// マイページを修正
$ atom app/views/users/me.html.erb
=================================
+
<h1>マイページ</h1>
<%= @current_user.name %>
=================================

※90から再開







============================
